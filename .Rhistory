group_by(Cluster) %>%
summarise(n = n()) %>%
arrange(n) %>%
mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
ggplot(aes(x = Cluster, y = n)) +
geom_bar(stat = "identity",
fill = "blue") +
geom_text(aes(label = n),
vjust = -0.25) +
coord_flip() +
labs(x = "Number of Cities/Towns",
y = "Clusters",
title = "Natural Resource Grouping (Clusters)") +
theme_minimal())
# locations_nr %>%
#       group_by(Cluster) %>%
#       summarise(n = n()) %>%
#       arrange(n) %>%
#       mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
#       plot_ly(x = ~n, y = ~Cluster, type = "bar") %>%
#       layout(title = "Natural Resource Grouping", yaxis = list(title = "Cluster"),
#              xaxis = list(title = "Number of Cities/Towns"))
ggplotly(locations_nr %>%
group_by(Cluster) %>%
summarise(No_of_Cities = n()) %>%
arrange(n) %>%
mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
ggplot(aes(x = Cluster, y = No_of_Cities)) +
geom_bar(stat = "identity",
fill = "#1f77b4") +
geom_text(aes(label = No_of_Cities),
vjust = -0.25) +
coord_flip() +
labs(x = "Number of Cities/Towns",
y = "Clusters",
title = "Natural Resource Grouping (Clusters)") +
theme_minimal())
# locations_nr %>%
#       group_by(Cluster) %>%
#       summarise(n = n()) %>%
#       arrange(n) %>%
#       mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
#       plot_ly(x = ~n, y = ~Cluster, type = "bar") %>%
#       layout(title = "Natural Resource Grouping", yaxis = list(title = "Cluster"),
#              xaxis = list(title = "Number of Cities/Towns"))
ggplotly(locations_nr %>%
group_by(Cluster) %>%
summarise(No_of_Cities = n()) %>%
arrange(No_of_Cities) %>%
mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
ggplot(aes(x = Cluster, y = No_of_Cities)) +
geom_bar(stat = "identity",
fill = "#1f77b4") +
geom_text(aes(label = No_of_Cities),
vjust = -0.25) +
coord_flip() +
labs(x = "Number of Cities/Towns",
y = "Clusters",
title = "Natural Resource Grouping (Clusters)") +
theme_minimal())
# locations_nr %>%
#       group_by(Cluster) %>%
#       summarise(n = n()) %>%
#       arrange(n) %>%
#       mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
#       plot_ly(x = ~n, y = ~Cluster, type = "bar") %>%
#       layout(title = "Natural Resource Grouping", yaxis = list(title = "Cluster"),
#              xaxis = list(title = "Number of Cities/Towns"))
ggplotly(locations_nr %>%
group_by(Cluster) %>%
summarise(No_of_Cities = n()) %>%
arrange(No_of_Cities) %>%
mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
ggplot(aes(x = Cluster, y = No_of_Cities)) +
geom_bar(stat = "identity",
fill = "#1f77b4") +
geom_text(aes(label = No_of_Cities),
vjust = -0.25) +
coord_flip() +
labs(x = "Clusters",
y = "Number of Cities/Towns",
title = "Natural Resource Grouping (Clusters)") +
theme_minimal())
# locations_nr %>%
#       group_by(Cluster) %>%
#       summarise(n = n()) %>%
#       arrange(n) %>%
#       mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
#       plot_ly(x = ~n, y = ~Cluster, type = "bar") %>%
#       layout(title = "Natural Resource Grouping", yaxis = list(title = "Cluster"),
#              xaxis = list(title = "Number of Cities/Towns"))
ggplotly(locations_nr %>%
group_by(Cluster) %>%
summarise(No_of_Cities = n()) %>%
arrange(No_of_Cities) %>%
mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
ggplot(aes(x = Cluster, y = No_of_Cities)) +
geom_bar(stat = "identity",
fill = "#1f77b4") +
geom_text(aes(label = No_of_Cities),
vjust = -0.25) +
coord_flip() +
labs(x = "Cluster",
y = "Number of Cities/Towns",
title = "Natural Resource Grouping (Clusters)") +
theme_minimal())
Natural_Resource <- st_as_sf(locations_nr, coords = c("longitude", "latitude"), crs = 4326)
mapview(Natural_Resource,
zcol = "Cluster")
mapview(Natural_Resource,
zcol = "Cluster",
burst = TRUE)
mapview(Natural_Resource,
zcol = "Cluster")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readxl)
library(tidygeocoder)
library(sf)
library(mapview)
library(RColorBrewer)
data <- read_excel("geo_NCdata.xlsx")
hdi_data <- select(data, c("City", "Education", "Income", "Occupation",
"Health Status", "Housing",
"latitude", "longitude"))
hdi_data
head(hdi_data)
hdi_data[rowSums(is.na(hdi_data)) > 0,]$City
locations_hdi <- subset(hdi_data, !is.na(hdi_data$longitude) & !is.na(hdi_data$latitude))
locations__shdicale <- scale(select(locations_hdi,
c("Education", "Income", "Occupation",
"Health Status", "Housing")))
locations_hdi_scale <- scale(select(locations_hdi,
c("Education", "Income", "Occupation",
"Health Status", "Housing")))
library(factoextra)
fviz_nbclust(locations_hdi_scale, kmeans, method = "wss")
fviz_nbclust(locations_hdi_scale, kmeans, method =  "silhouette")
set.seed(123)
locations_nr_cluster <- kmeans(locations_hdi_scale,
centers = 2, nstart = 25)
locations_hdi_cluster <- kmeans(locations_hdi_scale,
centers = 2, nstart = 25)
ggplotly(fviz_cluster(locations_hdi_cluster, data = locations_hdi_scale) +
theme_minimal() +
theme(legend.position = "none") +
ggtitle("Human Development Index Clusters (Groups)"))
library(ggplot2)
library(plotly)
ggplotly(fviz_cluster(locations_hdi_cluster, data = locations_hdi_scale) +
theme_minimal() +
theme(legend.position = "none") +
ggtitle("Human Development Index Clusters (Groups)"))
locations_hdi$Cluster <- as.factor(locations_hdi_cluster$cluster)
head(locations_hdi)
hdi_clust <- select(locations_hdi, c("Education", "Income", "Occupation",
"Health Status", "Housing"))
nr_clust_table <- aggregate(nr_clust,
by=list(cluster= locations_nr_cluster$cluster),
mean)
hdi_clust_table <- aggregate(hdi_clust,
by=list(cluster= locations_hdi_cluster$cluster),
mean)
nr_clust_table
# locations_nr %>%
#       group_by(Cluster) %>%
#       summarise(n = n()) %>%
#       arrange(n) %>%
#       mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
#       plot_ly(x = ~n, y = ~Cluster, type = "bar") %>%
#       layout(title = "Natural Resource Grouping", yaxis = list(title = "Cluster"),
#              xaxis = list(title = "Number of Cities/Towns"))
ggplotly(locations_hdi %>%
group_by(Cluster) %>%
summarise(No_of_Cities = n()) %>%
arrange(No_of_Cities) %>%
mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
ggplot(aes(x = Cluster, y = No_of_Cities)) +
geom_bar(stat = "identity",
fill = "#1f77b4") +
geom_text(aes(label = No_of_Cities),
vjust = -0.25) +
coord_flip() +
labs(x = "Cluster",
y = "Number of Cities/Towns",
title = "Human Development Grouping (Clusters)") +
theme_minimal())
Human_Development <- st_as_sf(locations_hdi, coords = c("longitude", "latitude"), crs = 4326)
mapview(Human_Development,
zcol = "Cluster")
hdi_clust <- select(locations_hdi, c("Education", "Income", "Occupation",
"Health Status", "Housing"))
hdi_clust_table <- aggregate(hdi_clust,
by=list(cluster= locations_hdi_cluster$cluster),
mean)
nr_clust_table
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readxl)
library(tidygeocoder)
library(sf)
library(mapview)
library(RColorBrewer)
data <- read_excel("geo_NCdata.xlsx")
hdi_data <- select(data, c("City", "Education", "Income", "Occupation",
"Health Status", "Housing",
"latitude", "longitude"))
head(hdi_data)
hdi_data[rowSums(is.na(hdi_data)) > 0,]$City
locations_hdi <- subset(hdi_data, !is.na(hdi_data$longitude) & !is.na(hdi_data$latitude))
locations_hdi_scale <- scale(select(locations_hdi,
c("Education", "Income", "Occupation",
"Health Status", "Housing")))
#hopkins(locations_nr_scale, n = nrow(locations_nr_scale)-1)
library(factoextra)
fviz_nbclust(locations_hdi_scale, kmeans, method = "wss")
fviz_nbclust(locations_hdi_scale, kmeans, method =  "silhouette")
set.seed(123)
locations_hdi_cluster <- kmeans(locations_hdi_scale,
centers = 2, nstart = 25)
library(ggplot2)
library(plotly)
ggplotly(fviz_cluster(locations_hdi_cluster, data = locations_hdi_scale) +
theme_minimal() +
theme(legend.position = "none") +
ggtitle("Human Development Index Clusters (Groups)"))
locations_hdi$Cluster <- as.factor(locations_hdi_cluster$cluster)
head(locations_hdi)
hdi_clust <- select(locations_hdi, c("Education", "Income", "Occupation",
"Health Status", "Housing"))
hdi_clust_table <- aggregate(hdi_clust,
by=list(cluster= locations_hdi_cluster$cluster),
mean)
nr_clust_table
# locations_nr %>%
#       group_by(Cluster) %>%
#       summarise(n = n()) %>%
#       arrange(n) %>%
#       mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
#       plot_ly(x = ~n, y = ~Cluster, type = "bar") %>%
#       layout(title = "Natural Resource Grouping", yaxis = list(title = "Cluster"),
#              xaxis = list(title = "Number of Cities/Towns"))
ggplotly(locations_hdi %>%
group_by(Cluster) %>%
summarise(No_of_Cities = n()) %>%
arrange(No_of_Cities) %>%
mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
ggplot(aes(x = Cluster, y = No_of_Cities)) +
geom_bar(stat = "identity",
fill = "#1f77b4") +
geom_text(aes(label = No_of_Cities),
vjust = -0.25) +
coord_flip() +
labs(x = "Cluster",
y = "Number of Cities/Towns",
title = "Human Development Grouping (Clusters)") +
theme_minimal())
Human_Development <- st_as_sf(locations_hdi, coords = c("longitude", "latitude"), crs = 4326)
hdi_clust_table
fig <- hdi_data %>%
plot_ly(
x = ~Education,
type = 'violin',
box = list(
visible = T
),
meanline = list(
visible = T
),
x0 = 'Education'
)
fig <- fig %>%
layout(
yaxis = list(
title = "",
zeroline = F
)
)
fig
fig <- hdi_data %>%
plot_ly(
y = ~Education,
type = 'violin',
box = list(
visible = T
),
meanline = list(
visible = T
),
x0 = 'Education'
)
fig <- fig %>%
layout(
yaxis = list(
title = "",
zeroline = F
)
)
fig
fig <- hdi_data %>%
plot_ly(
y = ~Education,
type = 'violin',
box = list(visible = T),meanline = list(visible = T), x0 = 'Education')
fig <- fig %>%
layout(
yaxis = list(title = "Education Distribution", zeroline = F))
fig
fig <- hdi_data %>%
plot_ly(
y = ~Education,
type = 'violin',
box = list(visible = T),meanline = list(visible = T), x0 = 'Education')
fig <- fig %>%
layout(
title = "Distribution of Education",
yaxis = list(title = "", zeroline = F))
fig
fig <- hdi_data %>%
plot_ly(
y = ~Education,
type = 'violin',
box = list(visible = T),meanline = list(visible = T), x0 = 'Education')
fig <- fig %>%
layout(
title = "Distribution of Education",
yaxis = list(title = "", zeroline = F),
xaxis = list(title = "%"))
fig
fig <- hdi_data %>%
plot_ly(
y = ~Education,
type = 'violin',
box = list(visible = T),meanline = list(visible = T), x0 = 'Education')
fig <- fig %>%
layout(
title = "Distribution of Education",
yaxis = list(title = "%", zeroline = F))
fig
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readxl)
library(tidygeocoder)
library(sf)
library(mapview)
library(RColorBrewer)
data <- read_excel("geo_NCdata.xlsx")
nr_data <- select(data, c("City", "Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity",
"latitude", "longitude"))
head(nr_data)
fig <- nr_data %>%
plot_ly(
y = ~`Availability of Water`,
type = 'violin',
box = list(visible = T),meanline = list(visible = T), x0 = 'Availability of Water')
fig <- fig %>%
layout(
title = "Distribution of Availability of Water",
yaxis = list(title = "%", zeroline = F))
fig
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readxl)
library(tidygeocoder)
library(sf)
library(mapview)
library(RColorBrewer)
library(plotly)
data <- read_excel("geo_NCdata.xlsx")
nr_data <- select(data, c("City", "Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity",
"latitude", "longitude"))
head(nr_data)
fig <- nr_data %>%
plot_ly(
y = ~`Availability of Water`,
type = 'violin',
box = list(visible = T),meanline = list(visible = T), x0 = 'Availability of Water')
fig <- fig %>%
layout(
title = "Distribution of Availability of Water",
yaxis = list(title = "%", zeroline = F))
fig
nr_data[rowSums(is.na(nr_data)) > 0,]$City
locations_nr <- subset(nr_data, !is.na(nr_data$longitude) & !is.na(nr_data$latitude))
locations_nr_scale <- scale(select(locations_nr,
c("Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity")))
#hopkins(locations_nr_scale, n = nrow(locations_nr_scale)-1)
library(factoextra)
fviz_nbclust(locations_nr_scale, kmeans, method = "wss")
fviz_nbclust(locations_nr_scale, kmeans, method =  "silhouette")
set.seed(123)
locations_nr_cluster <- kmeans(locations_nr_scale,
centers = 7, nstart = 25)
library(ggplot2)
library(plotly)
ggplotly(fviz_cluster(locations_nr_cluster, data = locations_nr_scale) +
theme_minimal() +
theme(legend.position = "none") +
ggtitle("Natural Resource Clusters (Groups)"))
locations_nr$Cluster <- as.factor(locations_nr_cluster$cluster)
head(locations_nr)
nr_clust <- select(locations_nr, c("Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity"))
nr_clust_table <- aggregate(nr_clust,
by=list(cluster= locations_nr_cluster$cluster),
mean)
nr_clust_table
# locations_nr %>%
#       group_by(Cluster) %>%
#       summarise(n = n()) %>%
#       arrange(n) %>%
#       mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
#       plot_ly(x = ~n, y = ~Cluster, type = "bar") %>%
#       layout(title = "Natural Resource Grouping", yaxis = list(title = "Cluster"),
#              xaxis = list(title = "Number of Cities/Towns"))
ggplotly(locations_nr %>%
group_by(Cluster) %>%
summarise(No_of_Cities = n()) %>%
arrange(No_of_Cities) %>%
mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
ggplot(aes(x = Cluster, y = No_of_Cities)) +
geom_bar(stat = "identity",
fill = "#1f77b4") +
geom_text(aes(label = No_of_Cities),
vjust = -0.25) +
coord_flip() +
labs(x = "Cluster",
y = "Number of Cities/Towns",
title = "Natural Resource Grouping (Clusters)") +
theme_minimal())
Natural_Resource <- st_as_sf(locations_nr, coords = c("longitude", "latitude"), crs = 4326)
mapview(Natural_Resource,
zcol = "Tourism Potential")
mapview(Natural_Resource,
zcol = "Tourism Potential",
cex = "Tourism Potential")
library(RColorBrewer)
mapview(Natural_Resource,
zcol = "Tourism Potential",
cex = "Tourism Potential",
col.regions = brewer.pal(7, "Dark2"))
mapview(Natural_Resource,
zcol = "Tourism Potential",
cex = "Tourism Potential",
col.regions = brewer.pal(100, "Dark2"))
mapview(Natural_Resource,
zcol = "Tourism Potential",
cex = "Tourism Potential",
color = "red")
mapview(Natural_Resource,
cex = "Tourism Potential",
color = "red")
mapview(Natural_Resource,
cex = "Tourism Potential",
color.regions = "red")
mapview(Natural_Resource,
cex = "Tourism Potential",
col.regions = "red")
mapview(Natural_Resource,
zcol = "Tourism Potential"
cex = "Tourism Potential",
mapview(Natural_Resource,
zcol = "Tourism Potential",
cex = "Tourism Potential",
col.regions = "red")
mapview(Natural_Resource,
cex = "Tourism Potential",
col.regions = "red")
mapview(Natural_Resource,
zcol = "City",
col.regions = "red")
mapview(Natural_Resource, legend = FALSE
cex = "Tourism Potential",
mapview(Natural_Resource, legend = FALSE,
cex = "Tourism Potential",
col.regions = "red")
mapview(Natural_Resource, legend = FALSE,
cex = "Availability of Water",
col.regions = "red")
shiny::runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
data <- read_excel("NCdata.xlsx", sheet = "PERCENT", range = cell_rows(1:98))
data <- select(data, c(1, "Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity",
"Education", "Income", "Occupation",
"Health Status", "Housing", "Natural Resources", "Human Development Index"))
data
names(data)[names(data) == names(data)[1]] <- "City"
head(data)
library(tidygeocoder) # for geocoding data
data$City <- paste0(data$City, ", Northern Cape")
geo_data <- data %>%
tidygeocoder::geocode(City, method = 'osm', lat = latitude, long = longitude)
library(writexl) # to write data in xlsx format
write_xlsx(geo_data, "geo_NCdata.xlsx") # comment after saving to avoid overwrite
knitr::opts_chunk$set(
echo    = FALSE,
message = FALSE,
warning = FALSE
)
data <- read_excel("geo_NCdata.xlsx")
data <- clean_names(data)
colnames(data)
runApp()
runApp()
colnames(data'')
colnames(data)
runApp()
