select(screen_name, text, coords_coords) %>%
unnest_wider(coords_coords) %>%
filter(!is.na(...1)) %>%
set_names(c("screen_name", "text", "lon","lat")) %>%
leaflet() %>%
addTiles() %>%
addMarkers(~lon, ~lat, popup = ~as.character(text), label = ~as.character(screen_name))
library(leaflet)
data_prepared <- tibble(
location = geocode_EK("South Africa",1000)
) %>%
separate(location, into = c("lat", "lon", "distance"), sep = ",", remove = FALSE) %>%
mutate(distance = distance %>% str_remove_all("[^0-9.-]")) %>%
mutate_at(.vars = vars(-location),as.numeric)
data_prepared %>%
leaflet() %>%
setView(data_prepared$lon, data_prepared$lat, zoom = 3) %>%
addTiles() %>%
addMarkers(~lon, ~lat, popup = ~as.character(location), label = ~as.character(location)) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1, radius = ~distance/0.000621371)
tweets_covid <- read_rds("C:/Users/Ellie/Downloads/tweets_covid.rds")
tweets_covid
tweets_tokenized_tbl <- tweets_covid %>%
select(text) %>%
rowid_to_column() %>%
unnest_tokens(word, text)
tweets_tokenized_tbl
tweets_tokenized_tbl %>% count(word, sort = TRUE)
get_sentiments(lexicon = "bing") # Categorical Positive / Negative
get_sentiments(lexicon = "afinn") # Assign polarity
sentiment_bin_tbl <- tweets_tokenized_tbl %>%
inner_join(get_sentiments("bing"))
# Overall sentiment
sentiment_bin_tbl %>% count(sentiment)
sentiment_bin_tbl$word
#Sentiment by user
Sentiment_by_row_id_tbl <- sentiment_bin_tbl %>%
select(-word) %>%
count(rowid, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = list(n = 0)) %>%
mutate(sentiment = positive - negative) %>%
left_join(
tweets_covid %>% select(screen_name, text) %>% rowid_to_column()
)
Sentiment_by_row_id_tbl <- sentiment_bin_tbl %>%
select(-word) %>%
count(rowid, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = list(n = 0)) %>%
mutate(sentiment = positive - negative) %>%
left_join(
tweets_covid %>% select(screen_name, text) %>% rowid_to_column()
)
label_wrap <- label_wrap_gen(width = 60)
data_formatted <- Sentiment_by_row_id_tbl %>%
mutate(text_formatted = str_glue("Row ID: {rowid}
Screen Name: {screen_name}
Text:
{label_wrap(text)}"))
g <- data_formatted %>%
ggplot(aes(rowid,sentiment)) +
geom_line(color = "#2c3e50", alpha = 0.5) +
geom_point(aes(text = text_formatted), color = "#2c3e50") +
geom_hline(aes(yintercept = mean(sentiment)), color ="blue") +
geom_hline(aes(yintercept = median(sentiment) + 1.96*IQR(sentiment)), color = "red") +
geom_hline(aes(yintercept = median(sentiment) - 1.96*IQR(sentiment)), color = "red") +
theme_tq() +
labs(title = "Sentiment Polarity", x = "Twitter user", y = "Sentiment")
g
ggplotly(g, tooltip = "text") %>%
layout(
xaxis = list(rangeslider = list(type = "date")
)
)
sentiment_by_word_tbl <- sentiment_bin_tbl %>%
count(word, sentiment, sort = TRUE)
sentiment_by_word_tbl %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = list(n = 0)) %>%
column_to_rownames(var = "word") %>%
comparison.cloud(
colors = palette_light()
)
sentiment_by_word_tbl %>%
slice(1:100) %>%
mutate(sentiment = factor(sentiment,levels = c("positive", "negative"))) %>%
ggplot(aes(label = word, color = sentiment, size = n)) +
geom_text_wordcloud_area() +
theme_tq() +
scale_color_tq() +
scale_size_area(max_size = 16) +
labs(title = "Sentiment word frequency")
sentiment_by_word_tbl %>%
slice(1:100) %>%
mutate(sentiment = factor(sentiment,levels = c("positive", "negative"))) %>%
ggplot(aes(label = word, color = sentiment, size = n)) +
geom_text_wordcloud_area() +
theme_tq() +
scale_color_tq() +
scale_size_area(max_size = 16) +
labs(title = "Sentiment word frequency")
sentiment_by_word_tbl %>%
slice(1:100) %>%
mutate(sentiment = factor(sentiment,levels = c("positive", "negative"))) %>%
ggplot(aes(label = word, color = sentiment, size = n)) +
geom_text_wordcloud_area() +
facet_wrap(~ sentiment, ncol = 2) +
theme_tq() +
scale_color_tq() +
scale_size_area(max_size = 16) +
labs(title = "Sentiment word frequency")
shiny::runApp()
runApp()
shiny::runApp()
library(shiny)
library(bs4Dash)
library(readxl)
library(dplyr)
library(tidygeocoder)
library(janitor)
library(leaflet)
library(plotly)
library(DT)
library(leafpop)
library(factoextra)
runApp()
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
library(rtweet)
library(dplyr)
library(tidygeocoder) # for geocoding data
library(ggmap)
# Interactive Maps
library(tmaptools)
library(leaflet)
#Visualization
library(plotly)
library(ggwordcloud)
library(wordcloud)
#Core
library(tidyverse)
# Text
library(tidytext)
library(textdata)
# Core
library(tidyverse)
library(tidyquant)
# create token named "twitter_token"
twitter_token <- create_token(
app = Sys.getenv("app"),
consumer_key = Sys.getenv("key"),
consumer_secret = Sys.getenv("secret"),
access_token = Sys.getenv("access_token"),
access_secret = Sys.getenv("access_secret")
)
geocode_ES <- function(loc, mil) {
geo_loc <- tidygeocoder::geo(loc, method = 'osm', lat = latitude, long = longitude)
paste0(paste0(paste0(geo_loc$latitude[1], ","), paste0(geo_loc$longitude[1], ",")),
paste0(mil, "mi"))
}
st <- search_tweets(
q = "covid19",
n =10,
include_rts = FALSE,
lang = "en",
geocode = geocode_ES("South Africa", 500)
)
st
st %>% glimpse()
st %>% select(contains("coords")) %>%
unnest_wider(geo_coords) %>%
filter(!is.na(...1))
geo_data <- st %>%
tidygeocoder::geocode(location, method = 'osm', lat = latitude, long = longitude)
st %>% glimpse()
geo_data %>% glimpse()
data_prepared <- tibble(
location = geocode_EK("South Africa",500)
) %>%
separate(location, into = c("lat", "lon", "distance"), sep = ",", remove = FALSE) %>%
mutate(distance = distance %>% str_remove_all("[^0-9.-]")) %>%
mutate_at(.vars = vars(-location),as.numeric)
data_prepared %>%
leaflet() %>%
setView(data_prepared$lon, data_prepared$lat, zoom = 3) %>%
addTiles() %>%
addMarkers(~lon, ~lat, popup = ~as.character(location), label = ~as.character(location)) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1, radius = ~distance/0.000621371)
data_prepared <- tibble(
location = geocode_EK("South Africa",500)
) %>%
separate(location, into = c("lat", "lon", "distance"), sep = ",", remove = FALSE) %>%
mutate(distance = distance %>% str_remove_all("[^0-9.-]")) %>%
mutate_at(.vars = vars(-location),as.numeric)
data_prepared %>%
leaflet() %>%
setView(data_prepared$lon, data_prepared$lat, zoom = 3) %>%
addTiles() %>%
addMarkers(~lon, ~lat, popup = ~as.character(location), label = ~as.character(location)) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1, radius = ~distance/0.000621371)
data_prepared <- tibble(
location = geocode_EK("South Africa",500)
) %>%
separate(location, into = c("lat", "lon", "distance"), sep = ",", remove = FALSE) %>%
mutate(distance = distance %>% str_remove_all("[^0-9.-]")) %>%
mutate_at(.vars = vars(-location),as.numeric)
data_prepared %>%
leaflet() %>%
setView(data_prepared$lon, data_prepared$lat, zoom = 7) %>%
addTiles() %>%
addMarkers(~lon, ~lat, popup = ~as.character(location), label = ~as.character(location)) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1, radius = ~distance/0.000621371)
data_prepared <- tibble(
location = geocode_EK("South Africa",500)
) %>%
separate(location, into = c("lat", "lon", "distance"), sep = ",", remove = FALSE) %>%
mutate(distance = distance %>% str_remove_all("[^0-9.-]")) %>%
mutate_at(.vars = vars(-location),as.numeric)
data_prepared %>%
leaflet() %>%
setView(data_prepared$lon, data_prepared$lat, zoom = 4) %>%
addTiles() %>%
addMarkers(~lon, ~lat, popup = ~as.character(location), label = ~as.character(location)) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1, radius = ~distance/0.000621371)
tweets_tokenized_tbl <- tweets %>%
select(text) %>%
rowid_to_column() %>%
unnest_tokens(word, text)
tweets_tokenized_tbl <- st %>%
select(text) %>%
rowid_to_column() %>%
unnest_tokens(word, text)
tweets_tokenized_tbl
tweets_tokenized_tbl %>% count(word, sort = TRUE)
get_sentiments(lexicon = "bing") # Categorical Positive / Negative
get_sentiments(lexicon = "afinn") # Assign polarity
sentiment_bin_tbl <- tweets_tokenized_tbl %>%
inner_join(get_sentiments("bing"))
# Overall sentiment
sentiment_bin_tbl %>% count(sentiment)
sentiment_bin_tbl$word
#Sentiment by user
Sentiment_by_row_id_tbl <- sentiment_bin_tbl %>%
select(-word) %>%
count(rowid, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = list(n = 0)) %>%
mutate(sentiment = positive - negative) %>%
left_join(
tweets %>% select(screen_name, text) %>% rowid_to_column()
)
# Overall sentiment
sentiment_bin_tbl %>% count(sentiment)
sentiment_bin_tbl$word
#Sentiment by user
Sentiment_by_row_id_tbl <- sentiment_bin_tbl %>%
select(-word) %>%
count(rowid, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = list(n = 0)) %>%
mutate(sentiment = positive - negative) %>%
left_join(
st %>% select(screen_name, text) %>% rowid_to_column()
)
Sentiment_by_row_id_tbl
sentiment_bin_tbl
sentiment_bin_tbl %>%
select(-word)
sentiment_bin_tbl %>%
select(-word) %>%
count(rowid, sentiment)
sentiment_bin_tbl %>%
select(-word) %>%
count(rowid, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = list(n = 0))
sentiment_bin_tbl %>%
select(-word) %>%
count(rowid, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = list(n = 0)) %>%
mutate(sentiment = positive - negative) %>%
sentiment_bin_tbl %>%
select(-word) %>%
count(rowid, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = list(n = 0)) %>%
mutate(sentiment = positive - negative)
sentiment_bin_tbl %>%
select(-word) %>%
count(rowid, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = list(n = 0)) %>%
mutate(sentiment = positive - negative)
Sentiment_by_row_id_tbl
rowid_to_column()
Sentiment_by_row_id_tbl
label_wrap <- label_wrap_gen(width = 60)
data_formatted <- Sentiment_by_row_id_tbl %>%
mutate(text_formatted = str_glue("Row ID: {rowid}
Screen Name: {screen_name}
Text:
{label_wrap(text)}"))
g <- data_formatted %>%
ggplot(aes(rowid,sentiment)) +
geom_line(color = "#2c3e50", alpha = 0.5) +
geom_point(aes(text = text_formatted), color = "#2c3e50") +
geom_hline(aes(yintercept = mean(sentiment)), color ="blue") +
geom_hline(aes(yintercept = median(sentiment) + 1.96*IQR(sentiment)), color = "red") +
geom_hline(aes(yintercept = median(sentiment) - 1.96*IQR(sentiment)), color = "red") +
theme_tq() +
labs(title = "Sentiment Polarity", x = "Twitter user", y = "Sentiment")
ggplotly(g, tooltip = "text") %>%
layout(
xaxis = list(rangeslider = list(type = "date")
)
)
label_wrap <- label_wrap_gen(width = 60)
data_formatted <- Sentiment_by_row_id_tbl %>%
mutate(text_formatted = str_glue("Row ID: {rowid}
Screen Name: {screen_name}
Text: {label_wrap(text)}"))
g <- data_formatted %>%
ggplot(aes(rowid,sentiment)) +
geom_line(color = "#2c3e50", alpha = 0.5) +
geom_point(aes(text = text_formatted), color = "#2c3e50") +
geom_hline(aes(yintercept = mean(sentiment)), color ="blue") +
geom_hline(aes(yintercept = median(sentiment) + 1.96*IQR(sentiment)), color = "red") +
geom_hline(aes(yintercept = median(sentiment) - 1.96*IQR(sentiment)), color = "red") +
theme_tq() +
labs(title = "Sentiment Polarity", x = "Twitter user", y = "Sentiment")
ggplotly(g, tooltip = "text") %>%
layout(
xaxis = list(rangeslider = list(type = "date")
)
)
sentiment_by_word_tbl <- sentiment_bin_tbl %>%
count(word, sentiment, sort = TRUE)
sentiment_by_word_tbl %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = list(n = 0)) %>%
column_to_rownames(var = "word") %>%
comparison.cloud(
colors = palette_light()
)
sentiment_by_word_tbl %>%
slice(1:100) %>%
mutate(sentiment = factor(sentiment,levels = c("positive","negative"))) %>%
ggplot(aes(label = word, color =sentiment, size =n)) +
geom_text_wordcloud_area() +
facet_wrap(~sentiment, ncol = 2) +
theme_tq() +
scale_color_tq() +
scale_size_area(max_size = 16) +
labs(title = "Sentiment Word Frequency")
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(shiny)
library(bs4Dash)
runApp()
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
library(rtweet)
library(dplyr)
library(tidygeocoder) # for geocoding data
library(ggmap)
# Interactive Maps
library(tmaptools)
library(leaflet)
#Visualization
library(plotly)
library(ggwordcloud)
library(wordcloud)
#Core
library(tidyverse)
# Text
library(tidytext)
library(textdata)
# Core
library(tidyverse)
library(tidyquant)
# create token named "twitter_token"
twitter_token <- create_token(
app = Sys.getenv("app"),
consumer_key = Sys.getenv("key"),
consumer_secret = Sys.getenv("secret"),
access_token = Sys.getenv("access_token"),
access_secret = Sys.getenv("access_secret")
)
geocode_ES <- function(loc, mil) {
geo_loc <- tidygeocoder::geo(loc, method = 'osm', lat = latitude, long = longitude)
paste0(paste0(paste0(geo_loc$latitude[1], ","), paste0(geo_loc$longitude[1], ",")),
paste0(mil, "mi"))
}
st <- search_tweets(
q = "#water",
n =50,
include_rts = FALSE,
lang = "en",
geocode = geocode_ES("South Africa", 500)
)
st %>% write_rds("water_data.rds")
st <- read_rds("water_data.rds")
st %>% glimpse()
# st %>% select(contains("coords")) %>%
#   unnest_wider(geo_coords) %>%
#   filter(!is.na(...1))
# geo_data <- st %>%
#   tidygeocoder::geocode(location, method = 'osm', lat = latitude, long = longitude)
#
# geo_data %>% glimpse()
# geo_data %>% slice(1:5) %>% select(screen_name,location,description)
# View(geo_data)
data_prepared <- tibble(
location = geocode_ES("South Africa",500)
) %>%
separate(location, into = c("lat", "lon", "distance"), sep = ",", remove = FALSE) %>%
mutate(distance = distance %>% str_remove_all("[^0-9.-]")) %>%
mutate_at(.vars = vars(-location),as.numeric)
data_prepared %>%
leaflet() %>%
setView(data_prepared$lon, data_prepared$lat, zoom = 4) %>%
addTiles() %>%
addMarkers(~lon, ~lat, popup = ~as.character(location), label = ~as.character(location)) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1, radius = ~distance/0.000621371)
tweets_tokenized_tbl <- st %>%
select(text) %>%
rowid_to_column() %>%
unnest_tokens(word, text)
# tweets_tokenized_tbl
tweets_tokenized_tbl %>% count(word, sort = TRUE) %>% head()
# get_sentiments(lexicon = "bing")  # Categorical Positive / Negative
#
# get_sentiments(lexicon = "afinn") # Assign polarity
get_sentiments(lexicon = "afinn") %>% head()
# get_sentiments(lexicon = "bing")  # Categorical Positive / Negative
#
# get_sentiments(lexicon = "afinn") # Assign polarity
get_sentiments(lexicon = "afinn") %>% head()
get_sentiments(lexicon = "afinn") %>% nrow()
get_sentiments(lexicon = "bing")  %>% head()
get_sentiments(lexicon = "bing")  %>% nrow()
# Overall sentiment
sentiment_bin_tbl %>% count(sentiment)
# sentiment_bin_tbl$word
#Sentiment by user
Sentiment_by_row_id_tbl <- sentiment_bin_tbl %>%
select(-word) %>%
count(rowid, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = list(n = 0)) %>%
mutate(sentiment = positive - negative) %>%
left_join(
st %>% select(screen_name, text) %>% rowid_to_column()
)
# Overall sentiment
# sentiment_bin_tbl %>% count(sentiment)
# sentiment_bin_tbl$word
#Sentiment by user
Sentiment_by_row_id_tbl <- sentiment_bin_tbl %>%
select(-word) %>%
count(rowid, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = list(n = 0)) %>%
mutate(sentiment = positive - negative) %>%
left_join(
st %>% select(screen_name, text) %>% rowid_to_column()
)
Sentiment_by_row_id_tbl %>% head()
label_wrap <- label_wrap_gen(width = 60)
data_formatted <- Sentiment_by_row_id_tbl %>%
mutate(text_formatted = str_glue("Row ID: {rowid}
Screen Name: {screen_name}
Text: {label_wrap(text)}"))
g <- data_formatted %>%
ggplot(aes(rowid,sentiment)) +
geom_line(color = "#2c3e50", alpha = 0.5) +
geom_point(aes(text = text_formatted), color = "#2c3e50") +
geom_hline(aes(yintercept = mean(sentiment)), color ="blue") +
geom_hline(aes(yintercept = median(sentiment) + 1.96*IQR(sentiment)), color = "red") +
geom_hline(aes(yintercept = median(sentiment) - 1.96*IQR(sentiment)), color = "red") +
theme_tq() +
labs(title = "Sentiment Polarity", x = "Twitter user", y = "Sentiment")
ggplotly(g, tooltip = "text") %>%
layout(
xaxis = list(rangeslider = list(type = "date")
)
)
sentiment_by_word_tbl %>%
slice(1:100) %>%
mutate(sentiment = factor(sentiment,levels = c("positive","negative"))) %>%
ggplot(aes(label = word, color =sentiment, size =n)) +
geom_text_wordcloud_area() +
facet_wrap(~sentiment, ncol = 2) +
theme_tq() +
scale_color_tq() +
scale_size_area(max_size = 16) +
labs(title = "Sentiment Word Frequency")
