fig <- hdi_data %>%
plot_ly(
y = ~Education,
type = 'violin',
box = list(
visible = T
),
meanline = list(
visible = T
),
x0 = 'Education'
)
fig <- fig %>%
layout(
yaxis = list(
title = "",
zeroline = F
)
)
fig
fig <- hdi_data %>%
plot_ly(
y = ~Education,
type = 'violin',
box = list(visible = T),meanline = list(visible = T), x0 = 'Education')
fig <- fig %>%
layout(
yaxis = list(title = "Education Distribution", zeroline = F))
fig
fig <- hdi_data %>%
plot_ly(
y = ~Education,
type = 'violin',
box = list(visible = T),meanline = list(visible = T), x0 = 'Education')
fig <- fig %>%
layout(
title = "Distribution of Education",
yaxis = list(title = "", zeroline = F))
fig
fig <- hdi_data %>%
plot_ly(
y = ~Education,
type = 'violin',
box = list(visible = T),meanline = list(visible = T), x0 = 'Education')
fig <- fig %>%
layout(
title = "Distribution of Education",
yaxis = list(title = "", zeroline = F),
xaxis = list(title = "%"))
fig
fig <- hdi_data %>%
plot_ly(
y = ~Education,
type = 'violin',
box = list(visible = T),meanline = list(visible = T), x0 = 'Education')
fig <- fig %>%
layout(
title = "Distribution of Education",
yaxis = list(title = "%", zeroline = F))
fig
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readxl)
library(tidygeocoder)
library(sf)
library(mapview)
library(RColorBrewer)
data <- read_excel("geo_NCdata.xlsx")
nr_data <- select(data, c("City", "Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity",
"latitude", "longitude"))
head(nr_data)
fig <- nr_data %>%
plot_ly(
y = ~`Availability of Water`,
type = 'violin',
box = list(visible = T),meanline = list(visible = T), x0 = 'Availability of Water')
fig <- fig %>%
layout(
title = "Distribution of Availability of Water",
yaxis = list(title = "%", zeroline = F))
fig
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readxl)
library(tidygeocoder)
library(sf)
library(mapview)
library(RColorBrewer)
library(plotly)
data <- read_excel("geo_NCdata.xlsx")
nr_data <- select(data, c("City", "Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity",
"latitude", "longitude"))
head(nr_data)
fig <- nr_data %>%
plot_ly(
y = ~`Availability of Water`,
type = 'violin',
box = list(visible = T),meanline = list(visible = T), x0 = 'Availability of Water')
fig <- fig %>%
layout(
title = "Distribution of Availability of Water",
yaxis = list(title = "%", zeroline = F))
fig
nr_data[rowSums(is.na(nr_data)) > 0,]$City
locations_nr <- subset(nr_data, !is.na(nr_data$longitude) & !is.na(nr_data$latitude))
locations_nr_scale <- scale(select(locations_nr,
c("Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity")))
#hopkins(locations_nr_scale, n = nrow(locations_nr_scale)-1)
library(factoextra)
fviz_nbclust(locations_nr_scale, kmeans, method = "wss")
fviz_nbclust(locations_nr_scale, kmeans, method =  "silhouette")
set.seed(123)
locations_nr_cluster <- kmeans(locations_nr_scale,
centers = 7, nstart = 25)
library(ggplot2)
library(plotly)
ggplotly(fviz_cluster(locations_nr_cluster, data = locations_nr_scale) +
theme_minimal() +
theme(legend.position = "none") +
ggtitle("Natural Resource Clusters (Groups)"))
locations_nr$Cluster <- as.factor(locations_nr_cluster$cluster)
head(locations_nr)
nr_clust <- select(locations_nr, c("Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity"))
nr_clust_table <- aggregate(nr_clust,
by=list(cluster= locations_nr_cluster$cluster),
mean)
nr_clust_table
# locations_nr %>%
#       group_by(Cluster) %>%
#       summarise(n = n()) %>%
#       arrange(n) %>%
#       mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
#       plot_ly(x = ~n, y = ~Cluster, type = "bar") %>%
#       layout(title = "Natural Resource Grouping", yaxis = list(title = "Cluster"),
#              xaxis = list(title = "Number of Cities/Towns"))
ggplotly(locations_nr %>%
group_by(Cluster) %>%
summarise(No_of_Cities = n()) %>%
arrange(No_of_Cities) %>%
mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
ggplot(aes(x = Cluster, y = No_of_Cities)) +
geom_bar(stat = "identity",
fill = "#1f77b4") +
geom_text(aes(label = No_of_Cities),
vjust = -0.25) +
coord_flip() +
labs(x = "Cluster",
y = "Number of Cities/Towns",
title = "Natural Resource Grouping (Clusters)") +
theme_minimal())
Natural_Resource <- st_as_sf(locations_nr, coords = c("longitude", "latitude"), crs = 4326)
mapview(Natural_Resource,
zcol = "Tourism Potential")
mapview(Natural_Resource,
zcol = "Tourism Potential",
cex = "Tourism Potential")
library(RColorBrewer)
mapview(Natural_Resource,
zcol = "Tourism Potential",
cex = "Tourism Potential",
col.regions = brewer.pal(7, "Dark2"))
mapview(Natural_Resource,
zcol = "Tourism Potential",
cex = "Tourism Potential",
col.regions = brewer.pal(100, "Dark2"))
mapview(Natural_Resource,
zcol = "Tourism Potential",
cex = "Tourism Potential",
color = "red")
mapview(Natural_Resource,
cex = "Tourism Potential",
color = "red")
mapview(Natural_Resource,
cex = "Tourism Potential",
color.regions = "red")
mapview(Natural_Resource,
cex = "Tourism Potential",
col.regions = "red")
mapview(Natural_Resource,
zcol = "Tourism Potential"
cex = "Tourism Potential",
mapview(Natural_Resource,
zcol = "Tourism Potential",
cex = "Tourism Potential",
col.regions = "red")
mapview(Natural_Resource,
cex = "Tourism Potential",
col.regions = "red")
mapview(Natural_Resource,
zcol = "City",
col.regions = "red")
mapview(Natural_Resource, legend = FALSE
cex = "Tourism Potential",
mapview(Natural_Resource, legend = FALSE,
cex = "Tourism Potential",
col.regions = "red")
mapview(Natural_Resource, legend = FALSE,
cex = "Availability of Water",
col.regions = "red")
shiny::runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
data <- read_excel("NCdata.xlsx", sheet = "PERCENT", range = cell_rows(1:98))
data <- select(data, c(1, "Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity",
"Education", "Income", "Occupation",
"Health Status", "Housing", "Natural Resources", "Human Development Index"))
data
names(data)[names(data) == names(data)[1]] <- "City"
head(data)
library(tidygeocoder) # for geocoding data
data$City <- paste0(data$City, ", Northern Cape")
geo_data <- data %>%
tidygeocoder::geocode(City, method = 'osm', lat = latitude, long = longitude)
library(writexl) # to write data in xlsx format
write_xlsx(geo_data, "geo_NCdata.xlsx") # comment after saving to avoid overwrite
knitr::opts_chunk$set(
echo    = FALSE,
message = FALSE,
warning = FALSE
)
data <- read_excel("geo_NCdata.xlsx")
data <- clean_names(data)
colnames(data)
runApp()
runApp()
colnames(data'')
colnames(data)
runApp()
shiny::runApp()
runApp()
library(shiny); source('C:/Users/Ellie/Downloads/app.R')
install.packages("rtweet")
source('C:/Users/Ellie/Downloads/app.R')
runApp
runApp(ui= ui, server = server)
ui
server
runApp(ui= ui, server = server)
source('C:/Users/Ellie/Downloads/app.R')
source('C:/Users/Ellie/Downloads/app.R')
source('C:/Users/Ellie/Downloads/app.R')
library(shiny); source('C:/Users/Ellie/Downloads/app.R')
source('C:/Users/Ellie/Downloads/app.R')
runApp('C:/Users/Ellie/Downloads')
runApp()
runApp('C:/Users/Ellie/Downloads')
runApp('C:/Users/Ellie/Downloads')
runApp('C:/Users/Ellie/Downloads')
runApp()
runApp('C:/Users/Ellie/Downloads')
runApp()
runApp('C:/Users/Ellie/Downloads')
runApp('C:/Users/Ellie/Downloads')
shiny::runApp('C:/Users/Ellie/Downloads')
runApp('C:/Users/Ellie/Downloads')
runApp('C:/Users/Ellie/Downloads')
runApp('C:/Users/Ellie/Downloads')
runApp('C:/Users/Ellie/Downloads')
shiny::runApp('C:/Users/Ellie/Downloads')
runApp('C:/Users/Ellie/Downloads')
runApp('C:/Users/Ellie/Downloads')
runApp()
runApp('C:/Users/Ellie/Downloads')
runApp()
runApp('C:/Users/Ellie/Downloads')
runApp('C:/Users/Ellie/Desktop/4th year Hons/2nd Semester/DATA EXPLORATION AND VISUALIZATION/Policy-Amendments')
runApp()
shiny::runApp()
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
library(rtweet)
library(dplyr)
library(tidygeocoder) # for geocoding data
library(ggmap) # for register_google function/ masks tidygeocoder
# Interactive Maps
library(tmaptools)
library(leaflet)
#Visualization
library(plotly)
library(ggwordcloud)
library(wordcloud)
#Core
library(tidyverse)
# Text
library(tidytext)
library(textdata)
# Core
library(tidyverse)
library(tidyquant)
# create token named "twitter_token"
twitter_token <- create_token(
app = Sys.getenv("app"),
consumer_key = Sys.getenv("key"),
consumer_secret = Sys.getenv("secret"),
access_token = Sys.getenv("access_token"),
access_secret = Sys.getenv("access_secret")
)
tweets_covid <- rtweet::search_tweets(
q = "#Covid19", # Search query
n = 100, # Number of results
lang ="en", #Language
include_rts = FALSE # Don't include retweets if want unique tweets
)
#tweets_covid %>% write_rds(path = "tweets_covid.rds")
tweets_covid = read_rds("tweets_covid.rds")
tweets_covid %>% glimpse()
#User info
tweets_covid %>% slice(1:5) %>% select(screen_name,location,description)
#Tweet info
tweets_covid %>% slice(1:5) %>% select(text,url)
# Hasgtags info(
tweets_covid %>% slice(1:5) %>% select(hashtags) %>% unnest_wider(hashtags)
# URL's in the tweet
tweets_covid %>% slice(1:5) %>% select(urls_expanded_url) %>% unnest(urls_expanded_url)
lookup_coords("london, uk") # Requires google maps API (costs)
lookup_coords("usa") # Pre-programmed
rt <- stream_tweets(geocode_for_free("london, uk"), timeout = 5)
geocode_EK <- function(loc, mil) {
geo_loc <- tidygeocoder::geo(loc, method = 'osm', lat = latitude, long = longitude)
paste0(paste0(paste0(geo_loc$latitude[1], ","), paste0(geo_loc$longitude[1], ",")),
paste0(mil, "mi"))
}
st <- search_tweets(
q = "#covid19",
n =300,
include_rts = FALSE,
lang = "en",
geocode = geocode_EK("london, uk", 100), timeout = 5
)
st %>% glimpse()
st %>% select(contains("coords")) %>%
unnest_wider(geo_coords) %>%
filter(!is.na(...1))
geo_data <- st %>%
tidygeocoder::geocode(location, method = 'osm', lat = latitude, long = longitude)
geocode_EK <- function(loc, mil) {
geo_loc <- tidygeocoder::geo(loc, method = 'osm', lat = latitude, long = longitude)
paste0(paste0(paste0(geo_loc$latitude[1], ","), paste0(geo_loc$longitude[1], ",")),
paste0(mil, "mi"))
}
st <- search_tweets(
q = "#covid19",
n =50,
include_rts = FALSE,
lang = "en",
geocode = geocode_EK("london, uk", 100), timeout = 5
)
st %>% glimpse()
st %>% select(contains("coords")) %>%
unnest_wider(geo_coords) %>%
filter(!is.na(...1))
geo_data <- st %>%
tidygeocoder::geocode(location, method = 'osm', lat = latitude, long = longitude)
geo_data
location
geo_data %>% slice(1:5) %>% select(screen_name,location,description)
View(geo_data)
st %>%
select(screen_name, text, coords_coords) %>%
unnest_wider(coords_coords) %>%
filter(!is.na(...1)) %>%
set_names(c("screen_name", "text", "lon","lat")) %>%
leaflet() %>%
addTiles() %>%
addMarkers(~lon, ~lat, popup = ~as.character(text), label = ~as.character(screen_name))
data_prepared <- tibble(
location = geocode_EK("South Africa",1000)
) %>%
separate(location, into = c("lat", "lon", "distance"), sep = ",", remove = FALSE) %>%
mutate(distance = distance %>% str_remove_all("[^0-9.-]")) %>%
mutate_at(.vars = vars(-location),as.numeric)
data_prepared %>%
leaflet() %>%
setView(data_prepared$lon, data_prepared$lat, zoom = 3) %>%
addTiles() %>%
addMarkers(~lon, ~lat, popup = ~as.character(location), label = ~as.character(location)) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1, radius = ~distance/0.000621371)
location
st
st %>% glimpse()
st %>% glimpse()
st
st
st <- search_tweets(
q = "#covid19",
n =50,
include_rts = FALSE,
lang = "en",
geocode = geocode_EK("london, uk", 100), timeout = 5
)
st
st %>%
select(screen_name, text, coords_coords) %>%
unnest_wider(coords_coords) %>%
filter(!is.na(...1)) %>%
set_names(c("screen_name", "text", "lon","lat")) %>%
leaflet() %>%
addTiles() %>%
addMarkers(~lon, ~lat, popup = ~as.character(text), label = ~as.character(screen_name))
library(leaflet)
data_prepared <- tibble(
location = geocode_EK("South Africa",1000)
) %>%
separate(location, into = c("lat", "lon", "distance"), sep = ",", remove = FALSE) %>%
mutate(distance = distance %>% str_remove_all("[^0-9.-]")) %>%
mutate_at(.vars = vars(-location),as.numeric)
data_prepared %>%
leaflet() %>%
setView(data_prepared$lon, data_prepared$lat, zoom = 3) %>%
addTiles() %>%
addMarkers(~lon, ~lat, popup = ~as.character(location), label = ~as.character(location)) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1, radius = ~distance/0.000621371)
tweets_covid <- read_rds("C:/Users/Ellie/Downloads/tweets_covid.rds")
tweets_covid
tweets_tokenized_tbl <- tweets_covid %>%
select(text) %>%
rowid_to_column() %>%
unnest_tokens(word, text)
tweets_tokenized_tbl
tweets_tokenized_tbl %>% count(word, sort = TRUE)
get_sentiments(lexicon = "bing") # Categorical Positive / Negative
get_sentiments(lexicon = "afinn") # Assign polarity
sentiment_bin_tbl <- tweets_tokenized_tbl %>%
inner_join(get_sentiments("bing"))
# Overall sentiment
sentiment_bin_tbl %>% count(sentiment)
sentiment_bin_tbl$word
#Sentiment by user
Sentiment_by_row_id_tbl <- sentiment_bin_tbl %>%
select(-word) %>%
count(rowid, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = list(n = 0)) %>%
mutate(sentiment = positive - negative) %>%
left_join(
tweets_covid %>% select(screen_name, text) %>% rowid_to_column()
)
Sentiment_by_row_id_tbl <- sentiment_bin_tbl %>%
select(-word) %>%
count(rowid, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = list(n = 0)) %>%
mutate(sentiment = positive - negative) %>%
left_join(
tweets_covid %>% select(screen_name, text) %>% rowid_to_column()
)
label_wrap <- label_wrap_gen(width = 60)
data_formatted <- Sentiment_by_row_id_tbl %>%
mutate(text_formatted = str_glue("Row ID: {rowid}
Screen Name: {screen_name}
Text:
{label_wrap(text)}"))
g <- data_formatted %>%
ggplot(aes(rowid,sentiment)) +
geom_line(color = "#2c3e50", alpha = 0.5) +
geom_point(aes(text = text_formatted), color = "#2c3e50") +
geom_hline(aes(yintercept = mean(sentiment)), color ="blue") +
geom_hline(aes(yintercept = median(sentiment) + 1.96*IQR(sentiment)), color = "red") +
geom_hline(aes(yintercept = median(sentiment) - 1.96*IQR(sentiment)), color = "red") +
theme_tq() +
labs(title = "Sentiment Polarity", x = "Twitter user", y = "Sentiment")
g
ggplotly(g, tooltip = "text") %>%
layout(
xaxis = list(rangeslider = list(type = "date")
)
)
sentiment_by_word_tbl <- sentiment_bin_tbl %>%
count(word, sentiment, sort = TRUE)
sentiment_by_word_tbl %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = list(n = 0)) %>%
column_to_rownames(var = "word") %>%
comparison.cloud(
colors = palette_light()
)
sentiment_by_word_tbl %>%
slice(1:100) %>%
mutate(sentiment = factor(sentiment,levels = c("positive", "negative"))) %>%
ggplot(aes(label = word, color = sentiment, size = n)) +
geom_text_wordcloud_area() +
theme_tq() +
scale_color_tq() +
scale_size_area(max_size = 16) +
labs(title = "Sentiment word frequency")
sentiment_by_word_tbl %>%
slice(1:100) %>%
mutate(sentiment = factor(sentiment,levels = c("positive", "negative"))) %>%
ggplot(aes(label = word, color = sentiment, size = n)) +
geom_text_wordcloud_area() +
theme_tq() +
scale_color_tq() +
scale_size_area(max_size = 16) +
labs(title = "Sentiment word frequency")
sentiment_by_word_tbl %>%
slice(1:100) %>%
mutate(sentiment = factor(sentiment,levels = c("positive", "negative"))) %>%
ggplot(aes(label = word, color = sentiment, size = n)) +
geom_text_wordcloud_area() +
facet_wrap(~ sentiment, ncol = 2) +
theme_tq() +
scale_color_tq() +
scale_size_area(max_size = 16) +
labs(title = "Sentiment word frequency")
shiny::runApp()
runApp()
shiny::runApp()
