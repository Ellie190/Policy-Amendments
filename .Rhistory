mapview(locations_sf2)
locations_sf2 <- st_as_sf(locations_df2, coords = c("longitude", "latitude"), crs = 4326)
mapview(locations_sf2)
geo_data2 <- data %>%
tidygeocoder::geocode(City, method = 'census', lat = latitude , long = longitude)
geo_data2
data$City
geo(
address = "Kimberley", method = "osm",
lat = latitude, long = longitude
)
geo(
address = "Cillie", method = "osm",
lat = latitude, long = longitude
)
geo(
address = "Concordia", method = "osm",
lat = latitude, long = longitude
)
geo(
address = "Concordia", method = "osm",
lat = latitude, long = longitude, country = "South Africa"
)
geo(
city = "Concordia", method = "osm",
lat = latitude, long = longitude
)
geo(
state = "Concordia", method = "osm",
lat = latitude, long = longitude
)
geo(
county = "Concordia", method = "osm",
lat = latitude, long = longitude
)
geo(
county = "Northen Cape", method = "osm",
lat = latitude, long = longitude
)
geo(
county = "Northern Cape", method = "osm",
lat = latitude, long = longitude
)
geo(
state = "Northern Cape", method = "osm",
lat = latitude, long = longitude
)
knitr::opts_chunk$set(echo = TRUE)
source("utils/loadpackages.R")
source("utils/loadpackages.R")
data <- read_excel("NCdata.xlsx", sheet = "PERCENT", range = cell_rows(1:98))
colnames(data)
data <- read_excel("NCdata.xlsx", sheet = "PERCENT", range = cell_rows(1:98))
data <- select(data, c("Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environment Sensitivity",
"Education", "Income", "Occupation",
"Health Status", "Housing"))
colnames(data)
data <- read_excel("NCdata.xlsx", sheet = "PERCENT", range = cell_rows(1:98))
colnames(data)
data <- select(data, c("Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity",
"Education", "Income", "Occupation",
"Health Status", "Housing"))
data <- read_excel("NCdata.xlsx", sheet = "PERCENT", range = cell_rows(1:98))
data <- select(data, c("Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity",
"Education", "Income", "Occupation",
"Health Status", "Housing"))
names(data)[names(data) == names(data)[1]] <- "City"
data
data <- read_excel("NCdata.xlsx", sheet = "PERCENT", range = cell_rows(1:98))
data <- select(data, c(1, "Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity",
"Education", "Income", "Occupation",
"Health Status", "Housing"))
data
names(data)[names(data) == names(data)[1]] <- "City"
data
library(tidygeocoder) # for geocoding data
library(ggmap) # for register_google function/ masks tidygeocoder
head(data)
df$City <- paste0(df$City, ", Northern Cape")
data$City <- paste0(data$City, ", Northern Cape")
data
# register_google(key = Sys.getenv("GOOGLEGEOCODE_API_KEY"), write = TRUE)
geo_data <- data %>%
tidygeocoder::geocode(City, method = 'osm', lat = latitude, long = longitude)
write.csv(geo_data, "geo_NCdata.csv")
library(writexl) # to write data in xlsx format
write_xlsx(geo_data, "geo_NCdata.xlsx") # comment after saving to avoid overwrite
sapply(geo_data, function(x) sum(is.na(x)))
geo_data[rowSums(is.na(geo_data)) > 0,]
locations_data <- subset(geo_data, !is.na(geo_data$longitude) & !is.na(geo_data$latitude))
nr_data <- select(geo_data, c("City", "Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity",
"latitude", "longitude"))
hdi_data <- select(geo_data, c("City", "Education", "Income", "Occupation",
"Health Status", "Housing", "latitude", "longitude"))
nr_data[rowSums(is.na(nr_data)) > 0,]
hdi_data[rowSums(is.na(hdi_data)) > 0,]
locations_nr <- subset(nr_data, !is.na(nr_data$longitude) & !is.na(nr_data$latitude))
locations_hdi <- subset(hdi_data, !is.na(hdi_data$longitude) & !is.na(hdi_data$latitude))
library(sf)
library(mapview)
locations_sf_nr <- st_as_sf(locations_nr, coords = c("longitude", "latitude"), crs = 4326)
locations_sf_hdi <- st_as_sf(locations_hdi, coords = c("longitude", "latitude"), crs = 4326)
mapview(locations_sf_nr)
mapview(locations_sf_hdi)
clust_nr_sf <- st_as_sf(clust_nr, coords = c("longitude", "latitude"), crs = 4326)
# Natural Resources
clust_nr <- locations_nr
clust_$Group <-sample(rep(c("Cluster 1", "Cluster 2", "Cluster 3"),
length.out = nrow(locations_nr)),
size = nrow(locations_nr))
# Natural Resources
clust_nr <- locations_nr
clust_nr$Group <-sample(rep(c("Cluster 1", "Cluster 2", "Cluster 3"),
length.out = nrow(locations_nr)),
size = nrow(locations_nr))
# Natural Resources
clust_hdi <- locations_hdi
clust_hdi$Group <-sample(rep(c("Cluster 1", "Cluster 2", "Cluster 3"),
length.out = nrow(locations_hdi)),
size = nrow(locations_hdi))
clust_nr_sf <- st_as_sf(clust_nr, coords = c("longitude", "latitude"), crs = 4326)
clust_hdi_sf <- st_as_sf(clust_hdi, coords = c("longitude", "latitude"), crs = 4326)
library(leaflet)
library(leafpop)
mapview(clust_hdi_sf,
zcol = "Group",
popup = popupTable(
clust_hdi_sf,
zcol = c("City",
"Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity")
))
mapview(clust_nr_sf,
zcol = "Group",
popup = popupTable(
clust_nr_sf,
zcol = c("City",
"Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity")
))
1+1
1+1
1+1
memory.limit()
memory.limit(size=9000)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readxl)
library(readxl)
library(tidygeocoder)
library(sf)
library(mapview)
library(RColorBrewer)
data <- read_excel("geo_NCdata.xlsx")
data
nr_data <- select(geo_data, c("City", "Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity",
"latitude", "longitude"))
nr_data <- select(data, c("City", "Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity",
"latitude", "longitude"))
nr_data
head(nr_data)
nr_data[rowSums(is.na(nr_data)) > 0,]
nr_data[rowSums(is.na(nr_data)) > 0,]$City
locations_nr <- subset(nr_data, !is.na(nr_data$longitude) & !is.na(nr_data$latitude))
scale(c("Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity"))
scale(locations_nr$`Availability of Water`)
locations_nr_scale <- scale(select(locations_nr,
c("Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity")))
locations_nr_scale
fviz_nbclust(locations_nr_scale, kmeans, method = "wss")
install.packages("factoextra")
library(factoextra)
fviz_nbclust(locations_nr_scale, kmeans, method = "wss")
fviz_nbclust(ue_student_df_scale, kmeans, method =  "silhouette")
fviz_nbclust(locations_nr_scale, kmeans, method =  "silhouette")
locations_nr_cluster <- kmeans(locations_nr_scale,
centers = 7, nstart = 25)
fviz_cluster(locations_nr_cluster, data = locations_nr_scale)
library(plotly)
ggplotly(fviz_cluster(locations_nr_cluster, data = locations_nr_scale))
library(ggplot2)
ggplotly(fviz_cluster(locations_nr_cluster, data = locations_nr_scale) +
theme(legend.position = "none"))
ggplotly(fviz_cluster(locations_nr_cluster, data = locations_nr_scale) +
theme(legend.position = "none") +
theme_classic())
ggplotly(fviz_cluster(locations_nr_cluster, data = locations_nr_scale) +
theme_minimal() +
theme(legend.position = "none"))
ggplotly(fviz_cluster(locations_nr_cluster, data = locations_nr_scale) +
theme_minimal() +
theme(legend.position = "none") +
ggtitle("Natural Resource Clusters"))
ggplotly(fviz_cluster(locations_nr_cluster, data = locations_nr_scale) +
theme_minimal() +
theme(legend.position = "none") +
ggtitle(label = "Natural Resource Clusters",
subtitle = "How Natural Rwesources differ between groups"))
ggplotly(fviz_cluster(locations_nr_cluster, data = locations_nr_scale) +
theme_minimal() +
theme(legend.position = "none") +
ggtitle("Natural Resource Clusters (Groups)"))
locations_nr$Cluster <- as.factor(locations_nr_cluster$cluster)
head(locations_nr)
nr_clust <- select(locations_nr, c("Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity"))
nr_clust_table <- aggregate(nr_clust,
by=list(cluster= locations_nr_cluster$cluster),
mean)
nr_clust_table
locations_nr %>%
group_by(Cluster) %>%
summarise(n = n()) %>%
plot_ly(x = ~n, y = ~Cluster, type = "bar") %>%
layout(title = "User Engagement Grouping", yaxis = list(title = "Group"),
xaxis = list(title = "Students"))
locations_nr %>%
group_by(Cluster) %>%
summarise(n = n()) %>%
arrange(n) %>%
plot_ly(x = ~n, y = ~Cluster, type = "bar") %>%
layout(title = "Natural Resource Grouping", yaxis = list(title = "Cluster"),
xaxis = list(title = "Number of Cities/Towns"))
locations_nr %>%
group_by(Cluster) %>%
summarise(n = n()) %>%
arrange(n) %>%
mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
plot_ly(x = ~n, y = ~Cluster, type = "bar") %>%
layout(title = "Natural Resource Grouping", yaxis = list(title = "Cluster"),
xaxis = list(title = "Number of Cities/Towns"))
locations_nr %>%
group_by(Cluster) %>%
summarise(n = n()) %>%
arrange(n) %>%
mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
ggplot(aes(x = Cluster, y = n)) +
geom_bar(stat = "identity",
fill = "blue") +
geom_text(aes(label = n),
vjust = -0.25) +
coord_flip() +
labs(x = "Number of Cities/Towns",
y = "Clusters",
title = "Natural Resource Grouping (Clusters)") +
theme_minimal()
# locations_nr %>%
#       group_by(Cluster) %>%
#       summarise(n = n()) %>%
#       arrange(n) %>%
#       mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
#       plot_ly(x = ~n, y = ~Cluster, type = "bar") %>%
#       layout(title = "Natural Resource Grouping", yaxis = list(title = "Cluster"),
#              xaxis = list(title = "Number of Cities/Towns"))
ggplotly(locations_nr %>%
group_by(Cluster) %>%
summarise(n = n()) %>%
arrange(n) %>%
mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
ggplot(aes(x = Cluster, y = n)) +
geom_bar(stat = "identity",
fill = "blue") +
geom_text(aes(label = n),
vjust = -0.25) +
coord_flip() +
labs(x = "Number of Cities/Towns",
y = "Clusters",
title = "Natural Resource Grouping (Clusters)") +
theme_minimal())
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readxl)
library(tidygeocoder)
library(sf)
library(mapview)
library(RColorBrewer)
data <- read_excel("geo_NCdata.xlsx")
nr_data <- select(data, c("City", "Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity",
"latitude", "longitude"))
head(nr_data)
nr_data[rowSums(is.na(nr_data)) > 0,]$City
locations_nr <- subset(nr_data, !is.na(nr_data$longitude) & !is.na(nr_data$latitude))
locations_nr_scale <- scale(select(locations_nr,
c("Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity")))
#hopkins(locations_nr_scale, n = nrow(locations_nr_scale)-1)
library(factoextra)
fviz_nbclust(locations_nr_scale, kmeans, method = "wss")
fviz_nbclust(locations_nr_scale, kmeans, method =  "silhouette")
set.seed(123)
locations_nr_cluster <- kmeans(locations_nr_scale,
centers = 7, nstart = 25)
library(ggplot2)
library(plotly)
ggplotly(fviz_cluster(locations_nr_cluster, data = locations_nr_scale) +
theme_minimal() +
theme(legend.position = "none") +
ggtitle("Natural Resource Clusters (Groups)"))
locations_nr$Cluster <- as.factor(locations_nr_cluster$cluster)
head(locations_nr)
nr_clust <- select(locations_nr, c("Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity"))
nr_clust_table <- aggregate(nr_clust,
by=list(cluster= locations_nr_cluster$cluster),
mean)
nr_clust_table
locations_nr %>%
group_by(Cluster) %>%
summarise(n = n()) %>%
arrange(n) %>%
mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
plot_ly(x = ~n, y = ~Cluster, type = "bar",
text = n, textposition = "inside") %>%
layout(title = "Natural Resource Grouping", yaxis = list(title = "Cluster"),
xaxis = list(title = "Number of Cities/Towns"))
# ggplotly(locations_nr %>%
#       group_by(Cluster) %>%
#       summarise(n = n()) %>%
#       arrange(n) %>%
#       mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
#       ggplot(aes(x = Cluster, y = n)) +
#       geom_bar(stat = "identity",
#                fill = "blue") +
#       geom_text(aes(label = n),
#                 vjust = -0.25) +
#       coord_flip() +
#       labs(x = "Number of Cities/Towns",
#            y = "Clusters",
#            title = "Natural Resource Grouping (Clusters)") +
#       theme_minimal())
locations_nr %>%
group_by(Cluster) %>%
summarise(n = n()) %>%
arrange(n) %>%
mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
plot_ly(x = ~n, y = ~Cluster, type = "bar",
text = n) %>%
layout(title = "Natural Resource Grouping", yaxis = list(title = "Cluster"),
xaxis = list(title = "Number of Cities/Towns"))
# ggplotly(locations_nr %>%
#       group_by(Cluster) %>%
#       summarise(n = n()) %>%
#       arrange(n) %>%
#       mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
#       ggplot(aes(x = Cluster, y = n)) +
#       geom_bar(stat = "identity",
#                fill = "blue") +
#       geom_text(aes(label = n),
#                 vjust = -0.25) +
#       coord_flip() +
#       labs(x = "Number of Cities/Towns",
#            y = "Clusters",
#            title = "Natural Resource Grouping (Clusters)") +
#       theme_minimal())
locations_nr %>%
group_by(Cluster) %>%
summarise(n = n()) %>%
arrange(n) %>%
mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
plot_ly(x = ~n, y = ~Cluster, type = "bar",
text = n,
textposition = "auto") %>%
layout(title = "Natural Resource Grouping", yaxis = list(title = "Cluster"),
xaxis = list(title = "Number of Cities/Towns"))
# ggplotly(locations_nr %>%
#       group_by(Cluster) %>%
#       summarise(n = n()) %>%
#       arrange(n) %>%
#       mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
#       ggplot(aes(x = Cluster, y = n)) +
#       geom_bar(stat = "identity",
#                fill = "blue") +
#       geom_text(aes(label = n),
#                 vjust = -0.25) +
#       coord_flip() +
#       labs(x = "Number of Cities/Towns",
#            y = "Clusters",
#            title = "Natural Resource Grouping (Clusters)") +
#       theme_minimal())
# locations_nr %>%
#       group_by(Cluster) %>%
#       summarise(n = n()) %>%
#       arrange(n) %>%
#       mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
#       plot_ly(x = ~n, y = ~Cluster, type = "bar") %>%
#       layout(title = "Natural Resource Grouping", yaxis = list(title = "Cluster"),
#              xaxis = list(title = "Number of Cities/Towns"))
ggplotly(locations_nr %>%
group_by(Cluster) %>%
summarise(n = n()) %>%
arrange(n) %>%
mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
ggplot(aes(x = Cluster, y = n)) +
geom_bar(stat = "identity",
fill = "blue") +
geom_text(aes(label = n),
vjust = -0.25) +
coord_flip() +
labs(x = "Number of Cities/Towns",
y = "Clusters",
title = "Natural Resource Grouping (Clusters)") +
theme_minimal())
# locations_nr %>%
#       group_by(Cluster) %>%
#       summarise(n = n()) %>%
#       arrange(n) %>%
#       mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
#       plot_ly(x = ~n, y = ~Cluster, type = "bar") %>%
#       layout(title = "Natural Resource Grouping", yaxis = list(title = "Cluster"),
#              xaxis = list(title = "Number of Cities/Towns"))
ggplotly(locations_nr %>%
group_by(Cluster) %>%
summarise(No_of_Cities = n()) %>%
arrange(n) %>%
mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
ggplot(aes(x = Cluster, y = No_of_Cities)) +
geom_bar(stat = "identity",
fill = "#1f77b4") +
geom_text(aes(label = No_of_Cities),
vjust = -0.25) +
coord_flip() +
labs(x = "Number of Cities/Towns",
y = "Clusters",
title = "Natural Resource Grouping (Clusters)") +
theme_minimal())
# locations_nr %>%
#       group_by(Cluster) %>%
#       summarise(n = n()) %>%
#       arrange(n) %>%
#       mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
#       plot_ly(x = ~n, y = ~Cluster, type = "bar") %>%
#       layout(title = "Natural Resource Grouping", yaxis = list(title = "Cluster"),
#              xaxis = list(title = "Number of Cities/Towns"))
ggplotly(locations_nr %>%
group_by(Cluster) %>%
summarise(No_of_Cities = n()) %>%
arrange(No_of_Cities) %>%
mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
ggplot(aes(x = Cluster, y = No_of_Cities)) +
geom_bar(stat = "identity",
fill = "#1f77b4") +
geom_text(aes(label = No_of_Cities),
vjust = -0.25) +
coord_flip() +
labs(x = "Number of Cities/Towns",
y = "Clusters",
title = "Natural Resource Grouping (Clusters)") +
theme_minimal())
# locations_nr %>%
#       group_by(Cluster) %>%
#       summarise(n = n()) %>%
#       arrange(n) %>%
#       mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
#       plot_ly(x = ~n, y = ~Cluster, type = "bar") %>%
#       layout(title = "Natural Resource Grouping", yaxis = list(title = "Cluster"),
#              xaxis = list(title = "Number of Cities/Towns"))
ggplotly(locations_nr %>%
group_by(Cluster) %>%
summarise(No_of_Cities = n()) %>%
arrange(No_of_Cities) %>%
mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
ggplot(aes(x = Cluster, y = No_of_Cities)) +
geom_bar(stat = "identity",
fill = "#1f77b4") +
geom_text(aes(label = No_of_Cities),
vjust = -0.25) +
coord_flip() +
labs(x = "Clusters",
y = "Number of Cities/Towns",
title = "Natural Resource Grouping (Clusters)") +
theme_minimal())
# locations_nr %>%
#       group_by(Cluster) %>%
#       summarise(n = n()) %>%
#       arrange(n) %>%
#       mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
#       plot_ly(x = ~n, y = ~Cluster, type = "bar") %>%
#       layout(title = "Natural Resource Grouping", yaxis = list(title = "Cluster"),
#              xaxis = list(title = "Number of Cities/Towns"))
ggplotly(locations_nr %>%
group_by(Cluster) %>%
summarise(No_of_Cities = n()) %>%
arrange(No_of_Cities) %>%
mutate(Cluster = factor(Cluster, levels = unique(Cluster))) %>%
ggplot(aes(x = Cluster, y = No_of_Cities)) +
geom_bar(stat = "identity",
fill = "#1f77b4") +
geom_text(aes(label = No_of_Cities),
vjust = -0.25) +
coord_flip() +
labs(x = "Cluster",
y = "Number of Cities/Towns",
title = "Natural Resource Grouping (Clusters)") +
theme_minimal())
Natural_Resource <- st_as_sf(locations_nr, coords = c("longitude", "latitude"), crs = 4326)
mapview(Natural_Resource,
zcol = "Cluster")
mapview(Natural_Resource,
zcol = "Cluster",
burst = TRUE)
mapview(Natural_Resource,
zcol = "Cluster")
