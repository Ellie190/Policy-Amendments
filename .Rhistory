knitr::opts_chunk$set(echo = TRUE)
source("utils/loadpackages.R")
source("utils/loadpackages.R")
data <- read_excel("NCdata.xlsx", sheet = "Institutional services")
data
data <- read_excel("NCdata.xlsx", sheet = "PERCENT")
data <- read_excel("NCdata.xlsx", sheet = "PERCENT")
data <- read_excel("NCdata.xlsx", sheet = "PERCENT")
data
data <- read_excel("NCdata.xlsx", sheet = "PERCENT", range = "A1:A98")
data
data
names(data)[names(data) == names(data)[1]]
data
data <- read_excel("NCdata.xlsx", sheet = "PERCENT", range = cell_rows(1:98))
data
data <- read_excel("NCdata.xlsx", sheet = "PERCENT", range = cell_rows(1:98))
names(data)[names(data) == names(data)[1]] <- "City"
data
install.packages("tidygeocoder")
library(tidygeocoder)
data %>%
geocode(City, method = 'osm', lat = latitude , long = longitude)
install.packages("sf")
install.packages("mapview")
geo_data <- data %>%
geocode(City, method = 'osm', lat = latitude , long = longitude)
write.csv(geo_data, "geo_NCdata.csv")
geo_data
locations_sf <- st_as_sf(geo_data, coords = c("longitude", "latitude"), crs = 4326)
library(sf)
library(mapview)
locations_sf <- st_as_sf(geo_data, coords = c("longitude", "latitude"), crs = 4326)
sapply(geo_data, function(x) sum(is.na(x)))
geo_data[rowSums(is.na(geo_data)) > 0,]
!geo_data[rowSums(is.na(geo_data)) > 0,]
geo_data[rowSums(!is.na(geo_data)) > 0,]
geo_data
geo_data
geo_data[rowSums(is.na(geo_data)) > 0,]
subset(geo_data, !is.na(geo_data$longitude) & !is.na(geo_data$latitude))
locations_df <- subset(geo_data, !is.na(geo_data$longitude) & !is.na(geo_data$latitude))
locations_sf <- st_as_sf(locations_df, coords = c("longitude", "latitude"), crs = 4326)
mapview(locations_sf)
mapview(locations_sf)
geo_data <- data %>%
geocode(City, method = 'google', lat = latitude , long = longitude)
geo_data <- data %>%
geocode(City, method = 'osm', lat = latitude , long = longitude,
county = 'Northern Cape')
geo_data <- data %>%
geocode(City, method = 'osm', lat = latitude , long = longitude,
country = 'Northern Cape')
geo_data <- data %>%
geocode(City, method = 'osm', lat = latitude , long = longitude,
country = 'South Africa')
geo_data <- data %>%
geocode(City, method = 'osm', lat = latitude , long = longitude,
country = 'South Africa')
geo_data <- data %>%
geocode(City, method = 'google', lat = latitude , long = longitude)
usethis::edit_r_environ()
knitr::opts_chunk$set(echo = TRUE)
source("utils/loadpackages.R")
data <- read_excel("NCdata.xlsx", sheet = "PERCENT", range = cell_rows(1:98))
names(data)[names(data) == names(data)[1]] <- "City"
names(data)[names(data) == names(data)[1]] <- "City"
data
library(tidygeocoder)
register_google(key = Sys.setenv("GOOGLEGEOCODE_API_KEY"), write = TRUE)
library(tidygeocoder)
library(sf)
library(mapview)
register_google(key = Sys.setenv("GOOGLEGEOCODE_API_KEY"), write = TRUE)
library(tidygeocoder)
library(ggmap)
install.packages("ggmap")
library(tidygeocoder)
library(ggmap) # for register_google function
register_google(key = Sys.setenv("GOOGLEGEOCODE_API_KEY"), write = TRUE)
register_google(key = Sys.getenv("GOOGLEGEOCODE_API_KEY"), write = TRUE)
geo_data <- data %>%
geocode(City, method = 'google', lat = latitude , long = longitude)
register_google(key = Sys.getenv("GOOGLEGEOCODE_API_KEY"), write = TRUE)
geo_data <- data %>%
geocode(City, method = 'Google', lat = latitude , long = longitude)
data <- read_excel("NCdata.xlsx", sheet = "PERCENT", range = cell_rows(1:98))
names(data)[names(data) == names(data)[1]] <- "City"
data
library(tidygeocoder)
library(ggmap) # for register_google function
register_google(key = Sys.getenv("GOOGLEGEOCODE_API_KEY"), write = TRUE)
geo_data <- data %>%
geocode(City, method = 'Google', lat = latitude , long = longitude)
register_google(key = Sys.getenv("GOOGLEGEOCODE_API_KEY"), write = TRUE)
geo_data <- data %>%
geocode(data$City, method = 'Google', lat = latitude , long = longitude)
register_google(key = Sys.getenv("GOOGLEGEOCODE_API_KEY"), write = TRUE)
geo_data <- data %>%
geocode(data$City, method = 'Google')
register_google(key = Sys.getenv("GOOGLEGEOCODE_API_KEY"), write = TRUE)
geo_data <- data %>%
geocode(data$City, method = 'google', lat = latitude , long = longitude)
register_google(key = Sys.getenv("GOOGLEGEOCODE_API_KEY"), write = TRUE)
geo_data <- data %>%
geocode(data$City, method = 'osm', lat = latitude , long = longitude)
register_google(key = Sys.getenv("GOOGLEGEOCODE_API_KEY"), write = TRUE)
geo_data <- data %>%
geocode(City, method = 'osm', lat = latitude , long = longitude)
library(tidygeocoder)
library(ggmap) # for register_google function
register_google(key = Sys.getenv("GOOGLEGEOCODE_API_KEY"), write = TRUE)
geo_data <- data %>%
geocode(City, method = 'osm', lat = latitude , long = longitude)
# register_google(key = Sys.getenv("GOOGLEGEOCODE_API_KEY"), write = TRUE)
geo_data <- data %>%
geocode(City, method = 'osm', lat = latitude , long = longitude)
data
City
data$City
# register_google(key = Sys.getenv("GOOGLEGEOCODE_API_KEY"), write = TRUE)
geo_data <- data %>%
geocode(data$City, method = 'osm', lat = latitude , long = longitude)
# register_google(key = Sys.getenv("GOOGLEGEOCODE_API_KEY"), write = TRUE)
geo_data <- data %>%
geocode(as.character(data$City), method = 'osm', lat = latitude , long = longitude)
# register_google(key = Sys.getenv("GOOGLEGEOCODE_API_KEY"), write = TRUE)
geo_data <- data %>%
geocode(City, method = 'osm', lat = latitude , long = longitude)
source("utils/loadpackages.R")
data <- read_excel("NCdata.xlsx", sheet = "PERCENT", range = cell_rows(1:98))
names(data)[names(data) == names(data)[1]] <- "City"
library(tidygeocoder)
library(ggmap) # for register_google function
# register_google(key = Sys.getenv("GOOGLEGEOCODE_API_KEY"), write = TRUE)
geo_data <- data %>%
geocode(City, method = 'osm', lat = latitude , long = longitude)
knitr::opts_chunk$set(echo = TRUE)
source("utils/loadpackages.R")
data <- read_excel("NCdata.xlsx", sheet = "PERCENT", range = cell_rows(1:98))
names(data)[names(data) == names(data)[1]] <- "City"
data
library(tidygeocoder)
library(ggmap) # for register_google function
# register_google(key = Sys.getenv("GOOGLEGEOCODE_API_KEY"), write = TRUE)
geo_data <- data %>%
tidygeocoder::geocode(City, method = 'osm', lat = latitude , long = longitude)
# register_google(key = Sys.getenv("GOOGLEGEOCODE_API_KEY"), write = TRUE)
geo_data <- data %>%
tidygeocoder::geocode(City, method = 'google', lat = latitude , long = longitude)
geo_data
# register_google(key = Sys.getenv("GOOGLEGEOCODE_API_KEY"), write = TRUE)
geo_data <- data %>%
tidygeocoder::geocode(City, method = 'osm', lat = latitude , long = longitude)
data
cities_df <- as.data.frame(data)
cities_df
locations_gmdf <- mutate_geocode(cities_df, City)
locations_gmdf
egister_google(key = Sys.getenv("GOOGLEGEOCODE_API_KEY"), write = TRUE)
register_google(key = Sys.getenv("GOOGLEGEOCODE_API_KEY"), write = TRUE)
locations_gmdf <- mutate_geocode(cities_df, City)
library(sf)
library(mapview)
locations_df <- subset(geo_data, !is.na(geo_data$longitude) & !is.na(geo_data$latitude))
locations_sf <- st_as_sf(locations_df, coords = c("longitude", "latitude"), crs = 4326)
mapview(locations_sf)
geo_data[rowSums(is.na(geo_data)) > 0,]
locations_sf
rep(c("Cluster 1", "Cluster 2", "Cluster 3"), length.out = nrow(geo_data))
sample(c("Cluster 1", "Cluster 2", "Cluster 3"), length.out = nrow(geo_data))
rep(c("Cluster 1", "Cluster 2", "Cluster 3"), length.out = nrow(geo_data))
sample(rep(c("Cluster 1", "Cluster 2", "Cluster 3"), length.out = nrow(geo_data)),
size = nrow(geo_data))
clust_gdata <- geo_data
clust_gdata$Group <-sample(rep(c("Cluster 1", "Cluster 2", "Cluster 3"),
length.out = nrow(geo_data)),
size = nrow(geo_data))
clust_gdata <- locations_df
clust_gdata$Group <-sample(rep(c("Cluster 1", "Cluster 2", "Cluster 3"),
length.out = nrow(geo_data)),
size = nrow(geo_data))
View(locations_df)
clust_gdata <- locations_df
clust_gdata$Group <-sample(rep(c("Cluster 1", "Cluster 2", "Cluster 3"),
length.out = nrow(locations_df)),
size = nrow(locations_df))
View(locations_sf)
clust_sf <- st_as_sf(clust_gdata, coords = c("longitude", "latitude"), crs = 4326)
mapview(clust_gdata)
mapview(clust_sf)
mapview(clust_sf, zcol = "Group")
mapview(clust_sf, zcol = "City")
mapview(clust_sf, zcol = "City", legend = FALSE, zcol = "Group")
mapview(clust_sf, zcol = "City", legend = FALSE, color = "Group")
mapview(clust_sf, zcol = c("Group","City"), legend = FALSE)
mapview(clust_sf, zcol = c("Group"), legend = FALSE)
mapview(clust_sf, zcol = "Group", legend = FALSE)
mapview(clust_sf, zcol = "Group", legend = FALSE, burst = TRUE)
mapview(clust_sf, zcol = "Group", legend = FALSE, burst = TRUE, hide = TRUE)
mapview(clust_sf, zcol = "Group", legend = FALSE, burst = TRUE)
mapview(clust_sf, zcol = "Group", legend = FALSE, burst = TRUE,
col.regions=list("red","blue"),col=list("red","blue"))
mapview(clust_sf, zcol = "Group", legend = TRUE, burst = TRUE,
col.regions=list("red","blue"),col=list("red","blue"))
mapview(clust_sf, zcol = "Group", legend = TRUE, burst = TRUE)
library(leaflet)
library(leafpop)
mapview(clust_sf, zcol = "Group", legend = TRUE, burst = TRUE,
popup = popupTable(clust_sf,
zcol = "City"))
mapview(clust_sf,
popup = popupTable(clust_sf,
zcol = "City"))
mapview(clust_sf,
popup = popupTable(clust_sf,
zcol = "City"), zcol = "Group")
mapview(clust_sf, zcol = "Group", legend = TRUE, burst = TRUE,
popup = popupTable(clust_sf,
zcol = "City"))
geo_data
mapview(clust_sf,
zcol = "Group",
col.regions = brewer.pal(3, "Dark2"),
popup = popupTable(
clust_sf,
zcol = c("City",
"Natural Resources")
))
library(RColorBrewer)
mapview(clust_sf,
zcol = "Group",
col.regions = brewer.pal(3, "Dark2"),
popup = popupTable(
clust_sf,
zcol = c("City",
"Natural Resources")
))
mapview(clust_sf,
zcol = "Group",
col.regions = brewer.pal(3, "Dark2"),
burst = TRUE,
popup = popupTable(
clust_sf,
zcol = c("City",
"Natural Resources")
))
mapview(clust_sf,
zcol = "Group",
col.regions = brewer.pal(3, "Dark2"),
popup = popupTable(
clust_sf,
zcol = c("City",
"Natural Resources")
))
mapview(clust_sf,
zcol = "Group",
popup = popupTable(
clust_sf,
zcol = c("City",
"Natural Resources")
))
mapview(clust_sf,
zcol = "Group",
popup = popupTable(
clust_sf,
zcol = c("City",
"Natural Resources")
))
geo_data2 <- data %>%
tidygeocoder::geocode(City, method = 'census', lat = latitude , long = longitude)
geo_data2
locations_df2 <- subset(geo_data, !is.na(geo_data$longitude) & !is.na(geo_data$latitude))
locations_sf2 <- st_as_sf(locations_df2, coords = c("longitude", "latitude"), crs = 4326)
mapview(locations_sf2)
locations_df2 <- subset(geo_data2, !is.na(geo_data2$longitude) & !is.na(geo_data2$latitude))
locations_sf2 <- st_as_sf(locations_df2, coords = c("longitude", "latitude"), crs = 4326)
mapview(locations_sf2)
locations_sf2 <- st_as_sf(locations_df2, coords = c("longitude", "latitude"), crs = 4326)
mapview(locations_sf2)
geo_data2 <- data %>%
tidygeocoder::geocode(City, method = 'census', lat = latitude , long = longitude)
geo_data2
data$City
geo(
address = "Kimberley", method = "osm",
lat = latitude, long = longitude
)
geo(
address = "Cillie", method = "osm",
lat = latitude, long = longitude
)
geo(
address = "Concordia", method = "osm",
lat = latitude, long = longitude
)
geo(
address = "Concordia", method = "osm",
lat = latitude, long = longitude, country = "South Africa"
)
geo(
city = "Concordia", method = "osm",
lat = latitude, long = longitude
)
geo(
state = "Concordia", method = "osm",
lat = latitude, long = longitude
)
geo(
county = "Concordia", method = "osm",
lat = latitude, long = longitude
)
geo(
county = "Northen Cape", method = "osm",
lat = latitude, long = longitude
)
geo(
county = "Northern Cape", method = "osm",
lat = latitude, long = longitude
)
geo(
state = "Northern Cape", method = "osm",
lat = latitude, long = longitude
)
knitr::opts_chunk$set(echo = TRUE)
source("utils/loadpackages.R")
source("utils/loadpackages.R")
data <- read_excel("NCdata.xlsx", sheet = "PERCENT", range = cell_rows(1:98))
colnames(data)
data <- read_excel("NCdata.xlsx", sheet = "PERCENT", range = cell_rows(1:98))
data <- select(data, c("Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environment Sensitivity",
"Education", "Income", "Occupation",
"Health Status", "Housing"))
colnames(data)
data <- read_excel("NCdata.xlsx", sheet = "PERCENT", range = cell_rows(1:98))
colnames(data)
data <- select(data, c("Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity",
"Education", "Income", "Occupation",
"Health Status", "Housing"))
data <- read_excel("NCdata.xlsx", sheet = "PERCENT", range = cell_rows(1:98))
data <- select(data, c("Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity",
"Education", "Income", "Occupation",
"Health Status", "Housing"))
names(data)[names(data) == names(data)[1]] <- "City"
data
data <- read_excel("NCdata.xlsx", sheet = "PERCENT", range = cell_rows(1:98))
data <- select(data, c(1, "Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity",
"Education", "Income", "Occupation",
"Health Status", "Housing"))
data
names(data)[names(data) == names(data)[1]] <- "City"
data
library(tidygeocoder) # for geocoding data
library(ggmap) # for register_google function/ masks tidygeocoder
head(data)
df$City <- paste0(df$City, ", Northern Cape")
data$City <- paste0(data$City, ", Northern Cape")
data
# register_google(key = Sys.getenv("GOOGLEGEOCODE_API_KEY"), write = TRUE)
geo_data <- data %>%
tidygeocoder::geocode(City, method = 'osm', lat = latitude, long = longitude)
write.csv(geo_data, "geo_NCdata.csv")
library(writexl) # to write data in xlsx format
write_xlsx(geo_data, "geo_NCdata.xlsx") # comment after saving to avoid overwrite
sapply(geo_data, function(x) sum(is.na(x)))
geo_data[rowSums(is.na(geo_data)) > 0,]
locations_data <- subset(geo_data, !is.na(geo_data$longitude) & !is.na(geo_data$latitude))
nr_data <- select(geo_data, c("City", "Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity",
"latitude", "longitude"))
hdi_data <- select(geo_data, c("City", "Education", "Income", "Occupation",
"Health Status", "Housing", "latitude", "longitude"))
nr_data[rowSums(is.na(nr_data)) > 0,]
hdi_data[rowSums(is.na(hdi_data)) > 0,]
locations_nr <- subset(nr_data, !is.na(nr_data$longitude) & !is.na(nr_data$latitude))
locations_hdi <- subset(hdi_data, !is.na(hdi_data$longitude) & !is.na(hdi_data$latitude))
library(sf)
library(mapview)
locations_sf_nr <- st_as_sf(locations_nr, coords = c("longitude", "latitude"), crs = 4326)
locations_sf_hdi <- st_as_sf(locations_hdi, coords = c("longitude", "latitude"), crs = 4326)
mapview(locations_sf_nr)
mapview(locations_sf_hdi)
clust_nr_sf <- st_as_sf(clust_nr, coords = c("longitude", "latitude"), crs = 4326)
# Natural Resources
clust_nr <- locations_nr
clust_$Group <-sample(rep(c("Cluster 1", "Cluster 2", "Cluster 3"),
length.out = nrow(locations_nr)),
size = nrow(locations_nr))
# Natural Resources
clust_nr <- locations_nr
clust_nr$Group <-sample(rep(c("Cluster 1", "Cluster 2", "Cluster 3"),
length.out = nrow(locations_nr)),
size = nrow(locations_nr))
# Natural Resources
clust_hdi <- locations_hdi
clust_hdi$Group <-sample(rep(c("Cluster 1", "Cluster 2", "Cluster 3"),
length.out = nrow(locations_hdi)),
size = nrow(locations_hdi))
clust_nr_sf <- st_as_sf(clust_nr, coords = c("longitude", "latitude"), crs = 4326)
clust_hdi_sf <- st_as_sf(clust_hdi, coords = c("longitude", "latitude"), crs = 4326)
library(leaflet)
library(leafpop)
mapview(clust_hdi_sf,
zcol = "Group",
popup = popupTable(
clust_hdi_sf,
zcol = c("City",
"Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity")
))
mapview(clust_nr_sf,
zcol = "Group",
popup = popupTable(
clust_nr_sf,
zcol = c("City",
"Availability of Water", "Agricultural Potential",
"Mining Potential", "Tourism Potential", "Environmental Sensitivity")
))
1+1
1+1
1+1
memory.limit()
memory.limit(size=9000)
